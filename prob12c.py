from math import sqrt

print('''
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
Let us list the factors of the first seven triangle numbers:
     1: 1
     3: 1,3
    28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred divisors?
''')

# Factorization
# Make a function 'factor' that finds the first prime divisor for any given number. Store those divisors, this is the factorization.
# Make a function that finds all subsets of the set of your exponents


def appendprimes(primes):
    current = primes[-1] + 2
    count = 0
    while count != 3:
        end = int(2 + current / 2)
        for div in range (2, end):
            if div == end - 1:
                primes.append(current)
                count += 1
                current += 2
            elif current % div == 0:
                current += 2
                break


def factor(num, primes):
    for ab in primes:
        if num % ab == 0:
            return ab
    return num

def factorize(triangle, primes):
    factorization = []
    while True:
        fact = factor(triangle, primes)
        factorization.append(fact)
        triangle = triangle / factorization[-1]
        if triangle == 1:
            break
    return factorization

def exponenticize(factors):
    exponents = [1]
    count = 1
    for ab in factors[0:-1]:
        if ab == factors[count]:
            exponents[-1] += 1
        else:
            exponents.append(1)
        count += 1
    return exponents

def divisors(exponents):
    if exponents == []:
        return 1
    fact = exponents.pop()
    return divisors(exponents) * (fact+1)


def start(num):
    triangle = 1
    count = 1
    primes = [2, 3]
    while True:
        count += 1
        triangle += count
        while True:
            if primes[-1] + 2 < sqrt(triangle):
                appendprimes(primes)
            else:
                break
        if divisors(exponenticize(factorize(triangle, primes))) > num:
            print count, triangle, factorize(triangle, primes), exponenticize(factorize(triangle, primes)), divisors(exponenticize(factorize(triangle, primes)))
            break

for ab in xrange(25, 300):
    start(ab)



